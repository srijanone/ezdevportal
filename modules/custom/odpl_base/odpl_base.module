<?php

/**
 * @file
 * Contains common hooks.
 */

use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\node\NodeInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\text\Plugin\Field\FieldWidget\TextareaWidget;

/**
 * @file
 * OpenDevPortal Base module file.
 */

/**
 * Implements hook_theme().
 */
function odpl_base_theme() {
  return [
    'banner_content' => [
      'variables' => [
        'bannerdata' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function odpl_base_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-search-page-search-block') {
    $form["#action"] = "/search-page";
  }
  elseif ($form['#id'] == 'views-exposed-form-search-page-search-page') {
    $form['combine']['#attributes']['class'][] = 'd-none';
    $form['combine']['#theme_wrappers'] = [];
  }
}

/**
 * Implements hook_form_alter().
 */
function odpl_base_form_alter(&$form, &$form_state, $form_id) {
  $user = \Drupal::currentUser();
  $roles = $user->getRoles();

  if (($form_id == 'webform_submission_subscribe_add_form' || strpos($form_id, 'webform_submission_subscribe_node_') !== FALSE) && in_array('anonymous', $roles)) {
    unset($form['actions']['submit']);
  }

  $form_id = ['taxonomy_term_forums_form', 'user_form', 'node_edit_form', 'taxonomy_overview_terms', 'taxonomy_overview_vocabularies', 'taxonomy_vocabulary_form', 'apigee_edge_authentication_form', 'views_exposed_form__search_page__search_block',
  ];

  if (in_array($form['#theme'][0], $form_id) && !empty(array_intersect([
    'developer',
    'site_admin',
    'editor',
  ], $roles))) {
    $form['#attached']['library'][] = 'ezdevportal_theme/simple-popup-blocks';
    $configFactory = \Drupal::service('config.factory');
    $configs = $configFactory->listAll('simple_popup_blocks.popup_');
    $form_settings = odpl_base_get_simplepopupblock_settings($configs);
    $form['#attached']['drupalSettings']['simple_popup_blocks']['settings'] = $form_settings['popup_settings'];
    $form['#cache']['tags'] = $form_settings['cacheTags'];
  }
}

/**
 * Returns the simple popup block settings.
 */
function odpl_base_get_simplepopupblock_settings($configs) {
  $configFactory = \Drupal::service('config.factory');
  $cacheTags = [];
  $popup_settings = [];
  foreach ($configs as $config) {
    $data = $configFactory->get($config)->get();
    $configCacheTags = $configFactory->get($config)->getCacheTags();
    if (is_array($configCacheTags) && count($configCacheTags)) {
      $cacheTags = array_merge($cacheTags, $configCacheTags);
    }
    if ($data['status'] == 1) {
      if ($data['type'] == 0) {
        $identifier = preg_replace('/[_]+/', '-', $data['identifier']);
        $data['identifier'] = 'block-' . $identifier;
      }
      $visit_counts = unserialize($data['visit_counts'], ['allowed_classes' => FALSE]);
      $data['visit_counts'] = implode(",", $visit_counts);
      // Sanitize each entry.
      $settings_to_add = [];
      foreach ($data as $key => $val) {
        if (!is_array($val)) {
          $settings_to_add[$key] = Html::escape($val);
        }
      }
      $popup_settings[] = $settings_to_add;
    }
  }

  return [
    'popup_settings' => $popup_settings,
    'cacheTags' => $cacheTags,
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function odpl_base_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['widget'] instanceof TextareaWidget) {
    $element['#after_build'][] = 'odpl_base_cleanup_textarea_field';
  }
}

/**
 * Cleans up the ckeditor additional options for non admins.
 */
function odpl_base_cleanup_textarea_field($form_element, FormStateInterface $form_state) {
  if (isset($form_element['format'])) {
    unset($form_element['format']['guidelines']);
    unset($form_element['format']['help']);
    unset($form_element['format']['#type']);
    unset($form_element['format']['#theme_wrappers']);
    $form_element['format']['format']['#access'] = FALSE;
  }
  return $form_element;
}

/**
 * Implements template_preprocess_block().
 */
function odpl_base_preprocess_block__content_cards_block(&$variables) {
  $block_data = $variables['elements']['content']['#block_content'];
  $card_block['block_header'] = $block_data->field_title->value;
  $card_block['block_width_type'] = $block_data->field_block_position->value;
  preg_match_all('/\d+/', $block_data->field_cards_layout->value, $matches);
  $card_block['block_column_count'] = $matches[0][0];
  if (!$block_data->field_read_more_link->isEmpty()) {
    $card_block['more_link'] = Url::fromUri($block_data->field_read_more_link[0]->uri)->toString();
    $card_block['more_link_title'] = $block_data->field_read_more_link[0]->title;
  }
  if (!$block_data->field_block_background_color->isEmpty()) {
    $card_block['background_color'] = $block_data->field_block_background_color->getValue()[0]['color'];
  }
  else {
    $card_block['background_color'] = '#FFFFFF';
  }
  $referenced_nodes = $block_data->field_referenced_nodes->getValue();
  foreach ($referenced_nodes as $referenced_node) {
    $card_block['cards'][] = odpl_base_get_node_card($referenced_node['target_id']);
  }
  $variables['card_block'] = $card_block;
}

/**
 * Implements template_preprocess_block().
 */
function odpl_base_preprocess_block__content_list_block(&$variables) {
  $block_data = $variables['elements']['content']['#block_content'];
  $banner_content['title'] = $block_data->field_title->value;
  $banner_content['link'] = Url::fromUri($block_data->field_read_more_link->getValue()[0]['uri'])->toString();
  $banner_content['link_title'] = $block_data->field_read_more_link->getValue()[0]['title'];

  if (!$block_data->field_block_image->isEmpty()) {
    $banner_content['image'] = file_create_url($block_data->field_block_image->entity->field_media_image->entity->getFileUri());
  }
  $banner_content['banner_image'] = $block_data->field_title->value;
  $referenced_nodes = $block_data->field_referenced_nodes->getValue();
  foreach ($referenced_nodes as $referenced_node) {
    $banner[] = odpl_base_get_node_card($referenced_node['target_id']);
  }
  $banner_content['content'] = $banner;
  $variables['banner_content'] = $banner_content;
}

/**
 * Implements template_preprocess_block().
 */
function odpl_base_preprocess_block__media_cards_block(&$variables) {
  $block_data = $variables['elements']['content']['#block_content'];
  $card_block['block_header'] = $block_data->field_title->value;
  preg_match_all('/\d+/', $block_data->field_cards_layout->value, $matches);
  $card_block['block_column_count'] = $matches[0][0];
  if (!$block_data->field_read_more_link->isEmpty()) {
    $card_block['more_link'] = Url::fromUri($block_data->field_read_more_link[0]->uri)->toString();
    $card_block['more_link_title'] = $block_data->field_read_more_link[0]->title;
  }

  $referenced_medias = $block_data->field_referenced_media->referencedEntities();
  foreach ($referenced_medias as $referenced_media) {
    $card_block['cards'][] = \Drupal::entityTypeManager()->getViewBuilder('media')->view($referenced_media);
  }
  $variables['card_block'] = $card_block;
}

/**
 * Implements template_preprocess_block().
 */
function odpl_base_preprocess_block__video_collection_block(&$variables) {
  $block_data = $variables['elements']['content']['#block_content'];
  $referenced_videos = $block_data->field_video_items->referencedEntities();
  foreach ($referenced_videos as $referenced_video) {
    $card_block['cards'][] = \Drupal::entityTypeManager()->getViewBuilder('paragraph')->view($referenced_video);
  }
  $variables['card_block'] = $card_block;
}

/**
 * Implements template_preprocess_block().
 */
function odpl_base_preprocess_block__slider_block(&$variables) {
  $block_data = $variables['elements']['content']['#block_content'];
  $block_content = $block_data->field_slide->referencedEntities();
  $content_slides = [];
  foreach ($block_content as $key => $value) {
    $content_slides[$key]['heading_1'] = $value->field_slide_main_heading->value;
    $content_slides[$key]['heading_2'] = $value->field_slide_sub_heading->value;
    $content_slides[$key]['description'] = $value->field_slide_description->value;
    $content_slides[$key]['cta_link'] = Url::fromUri($value->field_slider_cta_link->getValue()[0]['uri'])->toString();
    $content_slides[$key]['cta_link_title'] = $value->field_slider_cta_link->getValue()[0]['title'];
    $content_slides[$key]['image_url'] = file_create_url($value->field_slide_image->entity->field_media_image->entity->getFileUri());
  }
  $variables['content_slides'] = $content_slides;
}

/**
 * Function to get node card fields by node id.
 */
function odpl_base_get_node_card($nid) {
  $card_data = [];
  $node = Node::load($nid);
  $path_alias_manager = \Drupal::service('path_alias.manager');

  if ($node instanceof NodeInterface) {
    $card_data['title'] = $node->title->value;
    if (in_array($node->bundle(), ['api_product', 'use_case'])) {
      $card_data['url'] = $path_alias_manager->getAliasByPath('/node/' . $nid);
      $card_data['icon'] = odpl_base_get_node_card_image($node);
      $card_data['content'] = ($node->bundle() == 'use_case') ? $node->get('body')->summary : $node->field_summary->value;
      $card_data['text'] = 'Explore';
    }
    elseif ($node->bundle() == 'landing_page') {
      $card_data['icon'] = odpl_base_get_node_card_image($node);
      $card_data['content'] = $node->field_short_description->value;
      $card_data['landing_page_url'] = $path_alias_manager->getAliasByPath('/node/' . $nid);
    }
    elseif ($node->bundle() == 'blog_post') {
      $card_data['url'] = $path_alias_manager->getAliasByPath('/node/' . $nid);
      $card_data['icon'] = odpl_base_get_node_card_image($node);
      $card_data['content'] = $node->body->value;
      $card_data['date'] = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'custom', 'M d,Y');
      $card_data['bottom_date'] = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'custom', 'Y');
      $card_data['node_type'] = $node->getType();
      $uid = $node->getOwnerId();
      $user = User::load($uid);
      if (!is_null($user)) {
        $username = $user->getDisplayName();
        $card_data['username'] = $username;
      }
    }
  }
  return $card_data;
}

/**
 * Function to get the node card image.
 */
function odpl_base_get_node_card_image($node) {
  if (in_array($node->bundle(), ['api_product', 'use_case'])) {
    $image_url = (!$node->field_listing_image->isEmpty()) ? file_create_url($node->field_listing_image->entity->field_media_image->entity->getFileUri()) : '';
  }
  elseif ($node->bundle() == 'landing_page') {
    $image_url = (!$node->field_icon->isEmpty()) ? file_create_url($node->field_icon->entity->field_media_image->entity->getFileUri()) : '';
  }
  elseif ($node->bundle() == 'blog_post') {
    $image_url = (!$node->field_listing_image->isEmpty()) ? file_create_url($node->field_listing_image->entity->field_media_image->entity->getFileUri()) : '';
  }
  return $image_url;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function odpl_base_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Provide suggestion for block templates by custom block type.
  if (!empty($variables['elements']['content']['#block_content'])) {
    $block = $variables['elements']['content']['#block_content'];
    // Add `block--BLOCK-TYPE.html.twig`.
    $suggestions[] = 'block__' . $block->bundle();
    $uuid_block_name = 'block__' . $block->bundle() . '__' . $block->uuid();
    $suggestions[] = str_replace('-', '_', $uuid_block_name);
    $view_mode = $variables['elements']['#configuration']['view_mode'];
    if (!empty($view_mode)) {
      // Add `block--BLOCK-TYPE--VIEW-MODE.html.twig`.
      $suggestions[] = 'block__' . $block->bundle() . '__' . $view_mode;
    }
  }
}

/**
 * Implements hook_user_login().
 */
function odpl_base_user_login($account) {
  $roles = $account->getRoles();
  if (in_array('administrator', $roles)) {
    $url = '/admin/content';
    $current_request = \Drupal::service('request_stack')->getCurrentRequest();
    $current_request->query->set(
      'destination', $url
    );
  }
}
