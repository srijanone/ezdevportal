{
    "_links": {
        "self": {
            "href": ""
        },
        "type": {
            "href": "http:\/\/drupal.org\/rest\/type\/file\/file"
        },
        "http:\/\/drupal.org\/rest\/relation\/file\/file\/uid": [
            {
                "href": "http:\/\/default\/user\/1?_format=hal_json"
            }
        ]
    },
    "fid": [
        {
            "value": 63
        }
    ],
    "uuid": [
        {
            "value": "6035110b-0755-45df-aa09-0b5b32cafee8"
        }
    ],
    "langcode": [
        {
            "value": "en"
        }
    ],
    "_embedded": {
        "http:\/\/drupal.org\/rest\/relation\/file\/file\/uid": [
            {
                "_links": {
                    "self": {
                        "href": "http:\/\/default\/user\/1?_format=hal_json"
                    },
                    "type": {
                        "href": "http:\/\/drupal.org\/rest\/type\/user\/user"
                    }
                },
                "uuid": [
                    {
                        "value": "19ab37c2-e99e-42fd-95df-e9679782a582"
                    }
                ]
            }
        ]
    },
    "filename": [
        {
            "value": "Get Account Details.yaml"
        }
    ],
    "uri": [
        {
            "value": "public:\/\/2022-05\/Get Account Details.yaml",
            "url": "\/sites\/default\/files\/2022-05\/Get%20Account%20Details.yaml"
        }
    ],
    "filemime": [
        {
            "value": "application\/octet-stream"
        }
    ],
    "filesize": [
        {
            "value": 12305
        }
    ],
    "status": [
        {
            "value": true
        }
    ],
    "created": [
        {
            "value": "2022-05-05T15:29:13+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "changed": [
        {
            "value": "2022-05-05T15:29:21+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "data": [
        {
            "value": ""
        }
    ]
}