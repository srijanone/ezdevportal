{
    "_links": {
        "self": {
            "href": ""
        },
        "type": {
            "href": "http:\/\/drupal.org\/rest\/type\/file\/file"
        },
        "http:\/\/drupal.org\/rest\/relation\/file\/file\/uid": [
            {
                "href": "http:\/\/default\/user\/1?_format=hal_json"
            }
        ]
    },
    "fid": [
        {
            "value": 64
        }
    ],
    "uuid": [
        {
            "value": "f7772e05-8910-4eca-83c9-78efc6e0641f"
        }
    ],
    "langcode": [
        {
            "value": "en"
        }
    ],
    "_embedded": {
        "http:\/\/drupal.org\/rest\/relation\/file\/file\/uid": [
            {
                "_links": {
                    "self": {
                        "href": "http:\/\/default\/user\/1?_format=hal_json"
                    },
                    "type": {
                        "href": "http:\/\/drupal.org\/rest\/type\/user\/user"
                    }
                },
                "uuid": [
                    {
                        "value": "19ab37c2-e99e-42fd-95df-e9679782a582"
                    }
                ]
            }
        ]
    },
    "filename": [
        {
            "value": "payments.yaml"
        }
    ],
    "uri": [
        {
            "value": "public:\/\/2022-05\/payments.yaml",
            "url": "\/sites\/default\/files\/2022-05\/payments.yaml"
        }
    ],
    "filemime": [
        {
            "value": "application\/octet-stream"
        }
    ],
    "filesize": [
        {
            "value": 138284
        }
    ],
    "status": [
        {
            "value": true
        }
    ],
    "created": [
        {
            "value": "2022-05-05T15:32:16+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "changed": [
        {
            "value": "2022-05-05T15:32:34+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "data": [
        {
            "value": "\"
        }
    ]
}